@page "/uploadfile"
@rendermode InteractiveServer

<PageTitle>Upload A File</PageTitle>

<h1>Upload A File</h1>

<div style="margin-bottom: 20px; display: flex;">
    <div>Select your file:</div>
    <InputFile OnChange="FileUploaded" />
</div>

<h2>Selected file</h2>
<div>
    <div>File name: @FileName</div>
    <p>Number of Reporting Readers: @eventDictionary.Count()</p>
</div>

<table>
    <tr>
        <th>ReaderID</th>
        <th>Reader Name</th>
        <th>Reader Events</th>
    </tr>

    @foreach(var reader in eventDictionary)
    {

        <tr>
            <td>@reader.Key</td>
            <td>@reader.Value[0].GetEventDescription()</td>
            <td>@reader.Value.Count()</td>
        </tr>
        
    }
</table>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code{

    public string FileName { get; set; } = "";
    public string ErrorMessage { get; set; } = "";


    // Dictionary of ReaderEvents that uses the Unique ID as a key
    private Dictionary<string, List<ReaderEvent>> eventDictionary = new Dictionary<string, List<ReaderEvent>>();

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile != null)
        {

            try
            {
                // Saving Uploaded file to disk
                var fileStream = browserFile.OpenReadStream(long.MaxValue);
                var destinationStream = new FileStream(FileName, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                // Create a stream reader that reads from the stream when a file is uploaded & make an eventList to keep track
                var sr = new StreamReader(fileStream);
                var eventList = new List<ReaderEvent>();

                // Check every line of the stream in StreamReader
                string line;
                while((line = await sr.ReadLineAsync()) != null) // Until there is no remaining lines left
                {

                    // Break each line into an array with Reader Data
                    string[] data = line.Split(",");

                    // Create a new Reader Event using the string array of the current line
                    eventList.Add(new ReaderEvent(
                        data[0],
                        data[1],
                        data[2],
                        data[3],
                        data[4],
                        data[5]
                    ));

                    // Returns a dictionary with Readers and their Respective Events
                    eventDictionary = OrganizeDictionData(eventList);

                    // Close the file stream of the uploaded file
                    fileStream.Close();

                }

            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }
    public Dictionary<string, List<ReaderEvent>> OrganizeDictionData(List<ReaderEvent> rawData)
    {

        Dictionary<string, List<ReaderEvent>> resultDict = new Dictionary<string, List<ReaderEvent>>();

        // Goes through each recorded ReaderEvent in the raw Data list
        foreach(ReaderEvent rawReaderEvent in rawData)
        {

            // Get the reader's ID that captured the event and add or create a section in the dictionary accordingly
            var readerID = rawReaderEvent.GetEventUniqueID();
            if(!resultDict.ContainsKey(readerID))
            {

                resultDict[readerID] = new List<ReaderEvent>(); // Create a entry when unique readerID is found

            }
            resultDict[readerID].Add(rawReaderEvent); // Add an event to the respective reader

        }

        return resultDict;
        
    }

    public class ReaderEvent
    {

        // Data of a ReaderEvent
        private string time;
        private string location;
        private string description;
        private string hashID;
        private string devID;
        private string machine;

        // Constructors
        public ReaderEvent()
        {

            time = "0";
            location = "N/A";
            description = "N/A";
            hashID = "N/A";
            devID = "N/A";
            machine = "N/A";

        }
        public ReaderEvent(string eTime, string eLocation, string eDescription, string eHashID, string eDevID, string eMachine)
        {

            time = eTime;
            location = eLocation;
            description = eDescription;
            hashID = eHashID;
            devID = eDevID;
            machine = eMachine;

        }

        public string GetEventTime() => time;
        public string GetEventLocation() => location;
        public string GetEventDescription() => description;
        public string GetEventHashID() => hashID;
        public string GetEventDevID() => devID;
        public string GetEventMachine() => machine;

        public string GetEventUniqueID() => devID + machine;

    }

}

